#version 330 core

//Output data
out vec4 FragColor;

//Input Data
in vec2 FragTextureCoordinates;
in vec3 FragNormal;
in vec3 FragPos;

// Uniform buffer
uniform sampler2D textureData;

uniform vec3 directionalLightPos; 
uniform vec3 viewPos; 
uniform vec3 directionalLightColor;
uniform float textureAttached;

// calculates the color when using a directional light for forward rendering so we can compare it.
vec3 CalcDirLight()
{
    float ambientStrength = 1.0f;
    vec3 ambient = ambientStrength * directionalLightColor;
	vec3 norm = normalize(FragNormal);
    vec3 lightDir = normalize(directionalLightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * directionalLightColor;
    float specularStrength = 0.5;
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * directionalLightColor;  
    return (ambient + diffuse + specular);
}


void main()
{   

    vec3 color;
	color.x =0.5f;
	color.y =0.5f;
	color.z =0.0f;

    vec3 norm = normalize(FragNormal);
    vec3 viewDir = normalize(viewPos - FragPos);
    
	vec3 result;

	result = CalcDirLight();


	if(textureAttached == 0.0f)
	{
	result = result * color;
    FragColor = vec4(color.x,color.y,color.z,1.0) ;
	}
	else
	{
	vec4 textureColor;
	textureColor = texture(textureData, FragTextureCoordinates);
	result = result *vec3(textureColor.x,textureColor.y,textureColor.z);
	FragColor = vec4(result.x,result.y,result.z,1.0);
	}
}



